{
	"info": {
		"_postman_id": "da5bddc6-5e60-44a9-85c7-5331c82efa5c",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ER_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "ER_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",

							"//3. Спарсить response body в json.\r",

							"const responseJson = pm.response.json();\r",

							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",

							"pm.test(\"Person is Kate\", () => {\r",
							"  \r",
							"  pm.expect(responseJson.name).to.eql(\"Kate\");\r",

							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",

							"  pm.expect(responseJson.age).to.eql(\"32\");\r",

							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",

							"   pm.expect(responseJson.salary).to.eql(1000);\r",
							"});\r",
							"\r",

							"// 7. Спарсить request.\r",

							"let requestData = request.data;\r",


							"let salaryInt = +(requestData.salary);\r",
							"console.log(\"Вывод запроса===>\", requestData);\r",
							"console.log(salaryInt);\r",
							
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",

							
							"pm.test(\"Response name = Request name\", function ()  {\r",
							"\t    pm.expect(responseJson.name).to.eql(requestData.name);})\r",

							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",

							"pm.test(\"Response age = Request age\", function ()  {\r",
							"\t    pm.expect(responseJson.age).to.eql(requestData.age);})\r",

							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",

							"pm.test(\"Response salary = Request salary\", function ()  {\r",
							"\t    pm.expect(responseJson.salary).to.eql(salaryInt);}) \r",

							"// 11. Вывести в консоль параметр family из response.\r",

							"console.log(\"Response famili ===>\",responseJson.family ); \r",

							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",

							"pm.test(\"Response salary = Request salary\", function ()  {\r",
							"\t    pm.expect(responseJson.family.u_salary_1_5_year).to.eql(salaryInt*4);})    \r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kate",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "ER_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",

							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",

							"// 3. Спарсить response body в json.\r",

							"    var jsonData = pm.response.json();\r",

							"//4. Спарсить request. (из url)\r",

							"    let requestData = pm.request.url.query.toObject();\r",
							"\tlet salaryInt = +(requestData.salary);\r",
							"    \r",
							"  //  console.log(requestData);\r",

							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",

							"pm.test(\"Request name = Response name \",function(){\r",
							"    pm.expect(jsonData.name).to.eql(requestData.name);\r",
							"})  \r",

							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",

							"pm.test(\"Request age = Response age \",function(){\r",
							"    pm.expect(jsonData.age).to.eql(requestData.age);\r",
							"})\r",

							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",

							"pm.test(\"Request salary = Response salary \",function(){\r",
							"    pm.expect(jsonData.salary).to.eql(salaryInt);\r",
							"})          \r",

							"// 8. Вывести в консоль параметр family из response.\r",

							"console.log(\"Response family===>\", jsonData.family);\r",

							"// 9. Проверить, что у параметра dog есть параметры name.\r",

							"pm.test(\"Dog has a name\", function () {\r",
							"   pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"   })\r",

							

							"// 11. Проверить, что параметр name имеет значение Luky.\r",

							"pm.test(\"Dog name = Luky\", function () {\r",
							"   pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"\t\t\t\t\t\t\t})\r",

							"// 12. Проверить, что параметр age имеет значение 4.\r",

							"pm.test(\"Luky age = 4\", function () {\r",
							"   pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"\t\t\t\t\t\t\t})\r",
							"\r",
							"  \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Kate&age=32&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ER_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",

							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",

							"// 3. Спарсить response body в json.\r",

							" var jsonData = pm.response.json();\r",

							"// 4. Спарсить request.\r",

							" let requestData = pm.request.url.query.toObject();\r",
							" let salaryInt = +(requestData.salary);\r",
							" let ageint = +(requestData.age);\r",

							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",

							"    pm.test(\"Response.name = Request.name\", function(){\r",
							"        pm.expect(requestData.name).to.eql(jsonData.name);\r",
							"    })\r",

							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",

							"    pm.test(\"Response age = Request age\", function(){\r",
							"        pm.expect(ageint).to.eql(jsonData.age);\r",
							"\r",
							"    })\r",
							"\r",

							"// 7. Вывести в консоль параметр salary из request.\r",

							"    console.log(\"Request salary ===> \", requestData.salary);\r",

							"// 8. Вывести в консоль параметр salary из response.\r",

							"    console.log(\"Response salary ===> \", jsonData.salary);\r",

							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",

							"    console.log(\"Response salary[0] ===> \", jsonData.salary[0]);\r",
							
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",

							"     console.log(\"Response salary[1] ===> \", jsonData.salary[1]);\r",
							
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",

							"      console.log(\"Response salary[2] ===> \", jsonData.salary[2]);\r",

							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",

							"    pm.test(\"Response salary[0] = Request salary[0]\", function(){\r",
							"        pm.expect(salaryInt).to.eql(jsonData.salary[0]);\r",
							"    })\r",

							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",

							"     pm.test(\"Response salary[1] = Request salary[1]\", function(){\r",
							"        pm.expect(jsonData.salary[1]).to.eql+(salaryInt*2);\r",
							"    })\r",

							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",

							"     pm.test(\"Response salary[3] = Request salary[3]\", function(){\r",
							"        pm.expect(jsonData.salary[2]).to.eql+(salaryInt*3);\r",
							"    })\r",

							"// 15. Создать в окружении переменную name\r",
							"// Done \r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"// Done \r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"// Done \r",
							"\r",

							"// 18. Передать в окружение переменную name\r",

							"    pm.environment.set(\"name\", jsonData.name);\r",

							"// 19. Передать в окружение переменную age\r",

							"    pm.environment.set(\"age\", jsonData.age);\r",

							"// 20. Передать в окружение переменную salary\r",

							"    pm.environment.set(\"salary\", jsonData.salary[0]);\r",
							"    \r",

							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",

							"    let i=0;\r",
							"    for (i=0;i<jsonData.salary.length;i++){\r",
							"        console.log('Salary['+i+'] =' + jsonData.salary[i]);\r",
							"    }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Kate&age=45&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate"
						},
						{
							"key": "age",
							"value": "45"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ER_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// Done \r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// Done \r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// Done \r",

							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",

							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",

							"// 6. Спарсить response body в json.\r",

							"    var jsonData = pm.response.json();\r",

							"// 7. Спарсить request.\r",

							"    let requestData = request.data;\r",

							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",

							"    pm.test(\"json response имеет параметр start_qa_salary\", function () {\r",
							"\t\t pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"    } )  \r",

							"// 9. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",

							"    pm.test(\"json response имеет параметр  qa_salary_after_1.5_year\", function () {\r",
							"\t\t pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"    })\r",

							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",

							"    pm.test(\"json response имеет параметр qa_salary_after_12_months\", function () {\r",
							"\t\t pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"    }  ) \r",

							"// 11. Проверить, что json response имеет параметр qa_salary_after_3.5_year\r",

							"    pm.test(\"json response имеет параметр qa_salary_after_3.5_years\", function () {\r",
							"\t\t pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"    }  ) \r",

							"// 12. Проверить, что json response имеет параметр qa_salary_after_6_months\r",

							"     pm.test(\"json response имеет параметр qa_salary_after_6_months\", function () {\r",
							"\t\t pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"    }  ) \r",

							"// 13. Проверить, что json response имеет параметр person\r",

							" pm.test(\"json response имеет параметр person\", function () {\r",
							"\t\t pm.expect(jsonData).to.have.property(\"person\");\r",
							"    }  ) \r",

							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",

							"    pm.test(\"Response start_qa_salary = Request salary\", function(){\r",
							"        pm.expect(+requestData.salary).to.eql(jsonData.start_qa_salary);\r",
							"    })\r",

							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",

							"     pm.test(\"Response qa_salary_after_6_months = Request salary*2\", function(){\r",
							"        pm.expect(+requestData.salary*2).to.eql(jsonData.qa_salary_after_6_months);\r",
							"    })\r",

							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",

							"    pm.test(\"Response qa_salary_after_12_months = Request salary*2.7\", function(){\r",
							"        pm.expect(+requestData.salary*2.7).to.eql(jsonData.qa_salary_after_12_months);\r",
							"    })\r",

							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",

							"    pm.test(\"Response qa_salary_after_1.5_years = Request salary*3.3\", function(){\r",
							"        pm.expect(+requestData.salary*3.3).to.eql(jsonData['qa_salary_after_1.5_year']);\r",
							"    })\r",

							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",

							"    pm.test(\"Response qa_salary_after_3.5_years = Request salary*3.8\", function(){\r",
							"        pm.expect(+requestData.salary*3.8).to.eql(jsonData['qa_salary_after_3.5_years']);\r",
							"    })\r",

							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",

							"     pm.test(\"Response person.u_name = Request data\", function(){\r",
							"        pm.expect(jsonData.person.u_name[0]).to.eql(requestData.name);\r",
							"        pm.expect(jsonData.person.u_name[1]).to.eql(+requestData.salary);\r",
							"        pm.expect(jsonData.person.u_name[2]).to.eql(+requestData.age);\r",
							"        \r",
							"\r",
							"    })\r",

							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",

							"    pm.test(\"Response u_salary_5_years  = Request salary*4.2\", function(){\r",
							"       \r",
							"        pm.expect(jsonData.person.u_salary_5_years).to.eql(+requestData.salary*4.2);\r",
							"        \r",
							"\r",
							"    })\r",

							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",

							
							"    let i=0;\r",
							"    for (i=0;i<jsonData.person.u_name.length;i++){\r",
							"        console.log('person.u_name['+i+'] =' + jsonData.person.u_name[i]);\r",
							"    }\r",
							"    \r",
							"    \r",
							"\r",
							"    \r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
